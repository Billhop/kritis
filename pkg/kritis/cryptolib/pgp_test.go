/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package cryptolib

import (
	"testing"
)

// These keys and signatures were generated by the following commands:
// `gpg --quick-generate-key --yes pgp@cryptolib.com`
// `gpg --export --armor pgp@cryptolib.com`
// `gpg --output gpgSignature --armor -u pgp@cryptolib.com --sign payload`

const payload = `this is the payload i wish to sign
`

const gpgSignature = `-----BEGIN PGP MESSAGE-----

owGbwMvMwMXYscfgj8vNNfGMa0ySuAsSK3PyE1P0SipK4hYpLizJyCxWAKKSjFQF
qJRCpkJ5ZnGGQkm+QnFmeh5XJ+MxFgZGLgYDMUWWdxL7y7ZZP960tfZzGsxYViaQ
QUIyBekFDslFlQUl+TmZSXrJ+bkMXJwCMEVpujwMk9o/R97sS71SqfTl6a6bq8Qz
49zlgvL9WrS7nfJ/JiRUy9dHHmP/ke+V8uH8i4VLHn5xbRU9IXlxoeSjz8dL9828
+szN/Oo0mVlMu492RlisK+R8PiVmeUBw96b1sTV8TjeFPbKPbHJ2X3fueIWFX7RB
2YvfMofMz+5q9Ck/YSw5oU3z57+fL+tnd7wOeVoQb3C6ed5sPe4l4Ze68u9NMIhQ
te+NWWVacap3wltdxwKWCt3ieuXE91wXhBeu+jfh9P0u0xN1atVxj0UlMlWuJD9h
0mh48bRgvd2Kl023FSUu3Yh7G/hM/PvK9ln2os0rWEyFD9zK6I2r1Nfk2FKVF6/P
yvjtzcyFZ5xLJbYdDLvctXHXw+qCKh2eW3eygma0fkriYX/py+cf7j5zmtEnoUV/
v15dp5ceJWmjsb3pIavHzSPPAr3n5DIfyHyQcjlnqmqw2Os731+L2jD6NncdS3aw
r9ls06gvnSG3ZAm/6dUAWcY0F8FbW/e/TbkvdPDm2vknTH0TwiuPtMlsvNAhLZr3
5jsA
=qeZN
-----END PGP MESSAGE-----
`

const gpgPublicKey = `-----BEGIN PGP PUBLIC KEY BLOCK-----

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
N0Tk
=8PoI
-----END PGP PUBLIC KEY BLOCK-----
`

const gpgPublicKeyID = "EE18BF76B63BE3B2B57DF36688BC30FC44D9AC5F"

const gpgPrivateKey = `-----BEGIN PGP PRIVATE KEY BLOCK-----

lQVYBF6iHNEBDAD1i4EPP4cqhzUo/4jD+fkoG7pwFbWoKLd4AyRcR19X7yg/ahKH
fK2a2R8q17hgSnU98bD6sr+M3TulkMIEbDqNk2zEuN4L/ONVCzu/AsAtzJdxK4X4
ioE1MiCI1FPEmGF7/3wioxMhgB1rihV/IesbajT+gxO7phWJ9Ph6tZWdJW7K7V2G
bwcI2dWoJpmGXEQL08YF8IO2YoUX9iYpTK6mO0710he+O4hSG5NouiMxeey8BffP
9jdAXHQR8pCD8JVxY6ucfxSwc0aHTAVWIXBnpvcNz2o7idRpvt2wD7ciVjH+Hwmj
w9TvHTeERVqFE35e8roonDy8o7LDZN6gbWGUKoyzkgdJ+Nn1inlJJKH1V47cCUHI
rxZomDluu+V9ShhISqE+ecwuvU97BrQ8Gf7Ue1vqWQG31xIMpBRSk3EsDnS7v/8q
fWmNkjLRaUO2xgMBbCh3VcfYwf8Egi18wEpqeRf6Q1RVxYWc5dgBr69KDSfaOwWE
qT30icU2nGBKWrMAEQEAAQAL/iSTp+GAGp/srTASxKpA2esuGjspGLrYeeAQQ8HV
RfAg6ZNstx7kpS28ayakJMx/OvDDyJPHvb37lK+InUYwYxaE3/579WO+w5R/DGLb
Q4pvAB41GAtagn3MnkkTq/jMpDTm7XRxa1+hqIBE/QfHozCdxRAmsXFR/8JhsgQB
eayDj3n+GuD0OA2K+YdHXLZFl0NVxBlNZylripzzp2KekCOmERCQP8YwMxHcFrzS
gXyUx32IvA4IBNn7C7VCt2FYHHgp8kpK637C4ufZMXFN+ouWFNq3VUnQ16ywFubv
2Bqp9qoTZAEle8gtx7cXsn9sE2wBPP94/eYzHRo3nzkZwBYD9+gadXCgTWCw2nM4
6Ya5DnJrdhhAZU+0dt1UZJSc7JIaTudpHf4lSdrJ50v031jo+aTuJuH0AzY98SXd
I3wcAWOJ9c+vrnG0AwdyHlcrj/YyqCC/qoURyWIVAMH+Gdm1ToxjiYUBVLH9JwQ+
RKfJ8aoHjSzcpOLxI55Nt9KvOQYA+mFd1b5RQC6c8HJaBWf5o3gZGJCr78KJ97xe
63oaWnKunJb4qjsPUWzL1ZBtcBVsNwCbgIPNb+QGcv86gBEj2IL0doYA9PD9qehN
w9WVdkhVoMcDEdhosfTKIbD0qgqCe4ko+rXRliFytPH7qPODwWX0ZgOChRMY/4W0
4rwG7sq2ohXtwl3BWKd4mVUTjBhk9GKo2qxrM4LM6frR6evtiSCejZXY7VMAz/5W
+ACuYvlp0JESqHYsni+cZYr/YPkLBgD7Dlq5Yw/Vemowg2N6YaXSSaECJ6dwXnPM
QvzfZAmDbq6btJB0s/nSQEgZ+S6BNkU8ZTYljwSAoVNOItBbwXFv+WltzHWlStVc
FQxhEo82oURWY36+o97JaB3zPGzspSDLA92fiBoHxeJo3YG1EKfKRH/DK0vTObwu
dPadyhWta3UAyGlkul48OJpfYgk+mNG6rmsORveJj4fNm296DX5HrQk9AJxXu/aq
HFRozJ/0mwAveLJoJGO6IRV98igxvfkF/RHD8S8AmJr1mDViw4lbcx8gaO1yHz2q
Xmyk2d+PDy40hA2rDKjhOq7MB60u3vxuke78cGWVdBOjIpC0WMgBwiwkKga3DlgT
hl3tEFc/7P/KLqElvHjDgOgW4H4OyhQ6wia5ifXR7eeR4pgmXCjuKAUY0f6E1fQD
ayF2YPQR8bupLOWO7YUI9XhCqJwhl1oEjyO16QUYmvFm69qitGVpuaNWQiZgutf8
QwLm96JqkeUey9eN5BYieZld0tYs1ANOUeX3tBFwZ3BAY3J5cHRvbGliLmNvbYkB
1AQTAQoAPhYhBO4Yv3a2O+OytX3zZoi8MPxE2axfBQJeohzRAhsDBQkDwmcABQsJ
CAcCBhUKCQgLAgQWAgMBAh4BAheAAAoJEIi8MPxE2axfgfUL+gPT2h7+O2xZt6HH
tN1oX+qj27viyOTojKR++xh9ONICM78sftqph0TsqxKMV0OiQBtqZ2jOUv682zJ4
p2FKvC1naZOLhUrHSz7108A8EJM5iKCIfgoVAK/ha5QLbWINpZJR3cWIlJZO8dpb
QJPPdMB2plnLrEp4ptbz6a/iRNGwm2ln+jZJqBj0kXWEx0AdaxuN9YC/PzYFH08S
OEZTbb9v48CYZgmG7FkY9G6ZHWzoTyAAWVi+oQot3gzdHEgvQcHJWTxdLhqvLLa2
JuzY3awK1OWlyGZc76VTXdKphjpOG1a041ZUNvrViFCT9CBazT+7tFTq+skSe8kT
7OLu2ejzsphaIsnKeyK6JBtReJ6L1Jqce+/xxNx26FCxuMzqyDWGxB8yQxeFJuod
vUcWKHznfG37YTpcUQ3aJroa1ncQB2icvN5NWqhnA09vVeME9WoERM3w4FUAODc+
OWtrDmZUQZxASh7B/2w+6teFPBXR3S1PWa3aNXQkZZEDKhsl0J0FVwReohzRAQwA
xzcbN25MV98Gk8I4aq0G54YIk9JwIk1abBNSS9Q3iVVlylvjFHGKuEje7XOSXVjL
ahJ/ZVq/vKRGwA6WBNySWyI86/ioVZWmkfIBvhZGWn2ZXzEAWgjwbFeU/2n7VMJ0
KrwvDLKRcYD1zU1SGCeksOGvDReq0BP4koPtcgD3D9Eg4JPU39/OsHK9yYBdYQTM
n/0BrMF4R6aBoKdzmj7JKvc1+RP7OJns+3ebEOn5N7WkN7AXnCIPuaS8v+P3rt4+
EXz9tvPOJa7iCoShL0u/HztiBmHEReT9xhG6ZfM51Lrcq19GUtw0VHmSsD9ckFFk
TMXivdnB+uGR/gfSZL3Kf9ALjPYmc/bpz6JjfOpbwJtaRpaUgQy1pxURMgr1oFGM
nCgtAKl98yfpdlJqpF/+boRgt6YXiQH6AlpF/ARq2Z/g5Sur3bIOixQDu3Ikl35W
UbnVymSnMXqdl+dl4POFcwCsNk3/9BKsc6HCOM6opflZXR+nJZBbsUo/ty1rUGdR
ABEBAAEAC/jOY4HrXVosWeMEwBZdiuUOFJWx5VLxxPkh4nDSHrUx6A6NCVAc3fa9
LojjP6AOMgyL9J4HnFJd5Ldn0JhGcSGhgfOb2o/gxbghtLRSV2waGyIDYGuLFJtW
ThEPb/YrhJ9HNT2JW+ioPUgx+LBNcov0QzFtl96YXvvvCBRpebLuWrsm01a3tib6
pwG/3VnEYqZHGi0wP0BBM+qmafHoonjkJwDD02FyCZS0R1JDM7H+Wr85K1LYxHEU
cezhxExIiUqaJvgxpSMDUENhF4U9LUZvXi6oz/4y5asNZXS8wO+ssWITMgwTE7Qn
zB8/SjSqSddC5ucsu/TqeNhhDcTeP4MnU7ypedb4mpfigJydJZwTwlrQ3FlTYvqD
6SAmaB3vTUJ3FRpMenWbbASZWHheEl4oTgkvZ293rAp+SDGWb6hOwFL+2Utp9wbt
IFy2GtMo64+VbjSklDPNToDbnQQu1ZEa7MdxbYCPVEvcsBE/SGCzh4Nf5p/TM0pH
J9EHCnlT0QYA0kvi/fBjbKSdFEM9uc19ufW3WZdnxK1Hmyh7aDYD+CAo4TW6PpjL
LZsee1zXgVDIthRozuzTnz723IJze2E++OUZIPDYRsuIOBmG8UH4G6YaEgZ99BLg
FD/FRAEw4TVVPl6V3ZVFMZLM+LNcZzNfhs7+UM02pSOAYAz4nxHsLaqx8cO65BgF
0O7OXwiTNt3NqWzGlPxGULLeENMs7OWB00vVVef4+oJi3z+7pYcdxioA+37b5thT
37nyU20vAkQlBgDygrRJ9IMTjSqpOwzpnNxr1ki7RiOLnpVKmBrvKmG93Eg623XV
MG1ukBwdAAEv/JSEEOAQ84+RKrgfy5UKKaoGzf0MyzqnpaKKkpIcWmtB07HC/oBU
0aT6U6i/aGzLrtm/6Rv4eiA4onM72XBTY0Ay4iJwLp0gXDb7HOn2j7Kcw1jOqufR
4lKC3zgXbjK+gBfGjZx9eLjh5c30W+DHJ6xh/k713OkQke171qwDjS+6r0kjPUTp
8rDqVjCvZA4MOL0F/2B2MZzMMHIHr8X0vb+LErXkrEscWXSA+sRTgTt6oNnjSsI1
/OuI4ifefc0QxKyHV37MdqiseRQ3VFA7HfwJPAGYDDqePoC0QMwqzfxfK+FNs2Sr
cT6C0G3F/u4Hr/IgJt+scBmxiwh6Z8/QUvklAN/iPStbGS+2QdrORDMKQ/BxpD4G
oh+hzzGvK0BU3mIFvLuRweK7RgBYyXEw496vPXA/rVVunMIe8pUuvqhkoyEk0yJ6
tMQAyrIb1xPwMr4HcN9hiQG2BBgBCgAgFiEE7hi/drY747K1ffNmiLww/ETZrF8F
Al6iHNECGwwACgkQiLww/ETZrF+p6gv/eFBpfcfv04ZZu6GRUp4bFsObfbMkfk8C
nkatzBcSlfYAGwAZ2axCfO3IhlKugcy7dVBwwIagOa1IsB+qw5hbJAHvTCWXZ/7L
t9+Ym2nnIdpFe0tTN72KM7KkZELKSd0E0uIE160HA92KA1r3yzjMA9Udh+z9kusO
E8GuSESXqqGS6R1oJeFFpVCeg7HFda6+5mlwljfCoZ430x6aKCH7VepaC8Ht4wNZ
7Il0RKnq3SMlAJtURBT8FNnFXEmi5NJWM7Gx3tRV6vwdIEFU/LYlUEcYzlOk8MGn
yeaW1sBQ01HMxySgxYY/Me9EOfcwvqsG2WKtCyT+l0OIX5UlKn1/p/JzoJZiJo8/
MDRsmxJC33agW9Yjg7Xz23bZEkPTdndlsCkqFrguQgbCGIrOECeHriyMvnrY2lMw
YZlPyaXfWR8D2Dl7KZQtTX+5EziddJ/oIAU/rz89zvVTxOH4IbCdPYWams/drmJ1
KjcvssXVpdQiiRae+2e/hWxfnPdAN0Tk
=HYMC
-----END PGP PRIVATE KEY BLOCK-----
`

const wrongPrivateKey = `-----BEGIN PGP PRIVATE KEY BLOCK-----

lQVYBF55JI0BDACrbuWCMIEfd1zfsJNPQwug/RuuXqF7mRDzTdtMq5pWHwEmb/ig
+lTg/U7SjIGhfna2I8uaP8nR8Cvv3GpcQHeKfKzNeg+RajkROFaNtvhwTJF8R/Bo
YFI+w6gJ/uT/LmkHcJKqN7WPDfD4uYNwGM50nnZ9aYino9uoPEAJRnDav2BiA76v
sa0rMtlpK0ZgU4rQDnUwbbR+QkVoiWcio73K3OBwALWrTrXRvvdxVJolaD+EYF0I
GrAlq1FLBVg82eM1OHe1NC9+flXKQcSmxnfaCZ+mdXsUU3kCM28cKNqhKCgUfFv8
fylhkvKsV/ek1v6q1m92SnO41Og0RWnozcHCgNl4O/wE7HNqVmG4Af3nYKoFCvmL
ir4WrWihm9BMX6PL3bBHRTs+Zz4h9HX/EbW0I0Md4zyXfFZQR1MktRbAGwyE8bjj
Y/4NB8t57x0vj6o2uxWF4TqMNCozmfR0fiHIRzcCBCe+grK4n/33Bb74RX6ZzWw5
Yn3WIudhA5yEQI0AEQEAAQAL/RI5Hxd4PXmRUCONGxOdXmKWFTezYnoHethKKeoc
AbNu50nlNCo0ggpKkvLpsavvjAHviyiR6EuzOpBsPzggODTV7O6Ir5f3ESrl8Llu
vjj9wqdR5FnMB2IZnUa2vDPuBIcgbc6/TkLvKfLekXy8flHCOHk7WyXq0qIvCWWT
AdMW7dFtcXsuqWhCpv65dWku6D4Wk1l7B+k19TfYB0kU28txMEBnqugTXVt278mx
wxL/4mSZc7o1UA0pCWKupkMNrB8/puwR0OfkepAGkLS9y+H4zZdbFuDDTSAhr1NR
FqYIGI/Fmffn6W92sisQkBR0Qo0RuKuXjwKkehzhPAFRf9UWuin0J5FGf7XI28fs
U3XIMvdCsF27u2dhNDcCtEnAmRfKaUiw15RQGsqmoBDxWkELmlVy5GqTvwXuLJ4M
xezsP0RBLj+rsPtpGgPUOSTIfUc1a/UrsxB8ip747clZHWPad4tkVXuKWX0pt1Ug
6SFmWN7X+2lXEOdSgvPYy0OVtwYAyqvrWm0zOSDZ5x6m52rJyvZDH+oYNDKlJnbO
abMkN+gcvLI9tAhuqdW9bGVoVtIXD/JTwZI+23tNEdlLAnVjwHGRdy5fUHfhNYjI
qNYkuhlbqxMkbraL8r1VBkuHaadGLK9901IMs6phh1jp/XkKL9+FvyeHkGiuCuz3
NShEA8EfWyGVKBU9rBFIp+UOWDL46kO46MrPGSFUXgfbY/VLmWBbl1MLGnfL3QM+
GZLEQN2kJj2AR/dQJzwkh+kuhG1fBgDYir3KORrkZLAkSRFQzcaT7brZmudDVt5a
J4uowv5Ng+52496La/feqwNke/Pc9CEe7rN18l+q+E7jm8SN/HTqr6yFCak4TVy/
NZJqgLO+66rmpj+zc9IwaNfUT8cT0ZkxeKT0KBaFms/AWaH10mSLA1N/zCgQ7/2J
WLjchN5JGv1eazHUaIF2siU6SFh7i0kvtEOoqD4iHYsNkl0vEzyP9OX36oi80QFe
3bgGcz7VoZLJhP+Sl9X4tiJlbp0YbZMGAJiMH0uggTYIO0htan15fxDNkeKcI3rx
m9KpR7ZDcX/wO+nxJho0H4AvzWRURhHF/m/PtB33sh6D4Q0woFNxCo4C4Wzj7uDC
DqA+vYE9G+9bI/ekq1iUgONU8KqMle3Tb9PWQVyPa3/5GW/py4R209owQYtoxlG0
J7WApvi8oQJBirYmThHrJAVYqlsIRt37raaM1ruMZ4Wwn68LNKTcNvDNt4z5trEU
nNWNib0RbC3IkyuDA1FUoKHqsnpjaLdAV+AAtBRhdHRlc3RvckBleGFtcGxlLmNv
bYkB1AQTAQoAPhYhBCf+PcTCL1GC5FnAfRMgY0yzhlBJBQJeeSSNAhsDBQkDwmcA
BQsJCAcCBhUKCQgLAgQWAgMBAh4BAheAAAoJEBMgY0yzhlBJpxAL/jLZCXdLQEIE
CfORBnYGtEF46wTIeN0safrzUgs+kFZZQGonDrDmvRMhKn9KrZr1BUvTTXgumPsu
mEwG3Bvb/cNwqhmq/hL0EVD83oB8pSVAC7GkSYmy2FR0JLLVRvktj+/z2eIKaDbR
QFKvsZsDQRRGAa8EYGzNh2PbuD0luCo9aqTB8tRvFcPvraQ+yocYteS39wrafJnF
XVI1iPd7AmW0cf7TTLScKBbbbIHn/WtvJ1ZqOR2CmmyVG3W3EPXLSj/cTZkG9kqo
3Aiw1coCF20SyuvoXf/GPjC8BGyFt62LqNFuvFXUVABRoksYwjqZ70kfJR6Bhd4B
W2PPTREAUzOfxQzcNvjvDLOxvuMLWzUhf0aTdMdj2OdtlC2um1vqWTwcPo9YiRAI
U0ecXVkuEdlgiTpT9zQV6SNIIrucJ+0z/G7kVapXKZW0WCvHSySJIzjJOgY4hK3d
LleuRtxe7KwsL4zhOirwRJMG0Dw7K0cafJMG0I9SFcVQ2uI77Mudmp0FWAReeSSN
AQwA0Z1CABJx4CD0z4YO41w2w3mp6IPT/zdM9U6ZggQzTx2pPxyOB4OAdsWNz3bs
HFPxuKkLYAT6uCpaA16a0XU1Zh2Ddz27RzrgupfM0hVEZzynw5QWRGRfhKl6YrUO
dAgbF7C9AK6MMXVVySlX+m4CQ4CaVq0NQYw2+k2aeVsYuQ6QT3BzWI57uabEBnlW
wPwHxvWEBU/MkY0LEbI7202sYNQwQCh6QKYkLqpgfFyQ4KXjJm5WpQjrKogG+mvi
nwyMBeoqScx3sbCc/EEdDx9VPqQY17MNomfCgCFFvJDNzTjzYtNpv7UixX/heQFO
7GQ9w3NvUMJXPmSnUJnQ7HcGVtSjFSnnVTSRCZPNcX/JluLwmG26kgpWwUsA3fQP
LJ8QCmgBjL3bWWRJcg8IY1iJcZSOaSxSBrn6KGK7YIPQ/L1a7uIRtIiWWNuWv+Bv
XQJZycciTJfv5r3No7m2KR1YmIKvJxKz6AzOADZw1q6WeoN2QhjldhRvMLanZpv4
fzOzABEBAAEAC/sFvVMZ0md41h4t8oNE2XkMaC/tVHLBGcALNYBBjaDkCTFhr4P6
E7E4T1d/N0fmzKuhPUu48Nn2of49+mCt3JI+Pg+j+7Y9kJCnu1FZ7UgmtYP4eH0V
mVP+O2/E9SU0qyYmw2mhc6YWEprrO60Th+Ca/ZH8Tpe+1DqLJwXUTdjC9HGiIzed
VKVxo23ZqYflF+GUopNfW9yDncOQU/uMmTdfnV/G2fTjAUmbV4H11ckHxbMPEdVg
hnp9+ySJxdt6NGsya4K1eYk0lE6prQ/IBPFaOYQ7Abl9YxAfGPfvvpfyAkmcPr4M
9K0Brm4B38uv+fwPobUegzLLDTMLmO2axd2YNrtIZPh97mYBJXhIhCAtEkKlpc9f
gVg1EbwaAhUc1cRLr6rWlb3D/Sna+DqpHdWBX14k3ihMhrm0OJSb6kutBo/B2mbL
QtVS1GVLU++ofsU9sLXsya+wIDt1oEc35dBRPeEs28sH11APm7qP4BQ9NnQhM7Cj
hyChx48DxkqPiz0GAOGVoxs7uDVxzOGrmGFnLQzCUpD+/Lpu2X5FZ1Elok2GHH7M
1bDlvAp6iAiYP9SImgN07+lMM27M1zKkbEqhkgv6Z/6FBsPNBIDZPdHt/Yeob5Xa
ndvNr4oBK2fNmk0KN4hwqkuOhrtjt8Ga9vLZFnzngxdauZrnsRVjoeTLAq5sGD3u
FWtnANl2pa9h+TGEbaJdNfB0x69SrIIkmXqbNkhV+/4A/PINnvCS0xQLbrx+Pt6t
JWg/flLr+insHIc+5QYA7eBizmEAzmolfLNpRtS0+Xq13f+s4wsGzMb27Sly4nTE
IGQesXq9M6W907qCCWzJ9zxgIXE+852BZhN3E+Sqj/7AdLDgcHdSZP8eSI+hO+O8
lTu7KPluTsORc0VTJYBIyUzupnX3tsN2WetPzZVCIyEYIA8zLdU/mFdbmx7LHyKS
KfnQQJ/3jUWujclJq5vrFvGTIKIOEMT96jJ8c5YBEOCsxzXSsFSmZ+c2PzqkUADj
ROrz4RIMDlbwYam/mma3Bf9T7Y5XcH924RtKGaHCf44cN3ng430ZIbpHnGpckvMB
Y8uB/sjUJAdtJAZYINwId4QYnzj05yeqxBxEowuk+e657XthlXQJwmnPMb8ssVqP
XlR0+OKYyt26iFwRG0ounWxDPtmsVx3YTVZRlHO/oMByya2ygR3+SjGb3moQF+Tg
WarUF/3wevHu2T1dc+wc8q9StfoHtRmdFQMVl9IMOu/UqZwSQ8nJXaK7G08Nt4Ah
h4edaJkjoXIX3azFf1Nx46bsPYkBtgQYAQoAIBYhBCf+PcTCL1GC5FnAfRMgY0yz
hlBJBQJeeSSNAhsMAAoJEBMgY0yzhlBJ0JcL/RvbdaXp1BY3ZCn2/ttkEDM+EBaH
TFxfU6CkK3lUSQJXt1Xl5pwCTdH92pAw+eDDtJPV+vaQ1k6xYEefv+H9++kUlXSG
qENfpABzTXWShf1x6LmukoWsUMOk8gB5EYI79jhl8/VOaya5WlD1DTGVue2ktvlC
cJUEHrji7/gTwUiKn1cbt7AM0mR5fAKF2Thxhe+U5ZEfH0imT/pG4pUAOi0w9+Ds
iAQGvmC85KhjnzhBNJaVpXlrILcI8RH0UIiWag8pyjhbTRfsgh1IesF5C6neIzjJ
K7xWOKluwqV+2ZthbUJ6slZzQD2wkwwRPd1DV1Cbg/St7mtC3aeXf5+mL7DRCsj6
4UaDcOX9TfqNrCgTumulKttn7hq4eG9mxb2pAEFPmCcix0VcLPE1biGC2s7CiViS
S5CB5Ko3wQlsGtTLXO6sAkmcTr89t5d+mMWe+AHmS4IfUmD7X3pTMIpwBL653edi
lKLMsFlU5qTBXt3iMK9yOIU2IUGhA1AJYhV+og==
=luzc
-----END PGP PRIVATE KEY BLOCK-----
`

func TestVerifyPgp(t *testing.T) {
	tcs := []struct {
		name        string
		signature   []byte
		publicKey   []byte
		expectedErr bool
	}{
		{
			name:        "valid signature and public key",
			signature:   []byte(gpgSignature),
			publicKey:   []byte(gpgPublicKey),
			expectedErr: false,
		},
		{
			name:        "invalid signature",
			signature:   []byte("invalid-sig"),
			publicKey:   []byte(gpgPublicKey),
			expectedErr: true,
		},
		{
			name:        "invalid public key",
			signature:   []byte(gpgSignature),
			publicKey:   []byte("invalid-public-key"),
			expectedErr: true,
		},
	}

	v := pgpVerifierImpl{}
	for _, tc := range tcs {
		t.Run(tc.name, func(t *testing.T) {
			actualPayload, err := v.verifyPgp(tc.signature, tc.publicKey)
			if tc.expectedErr {
				if err == nil {
					t.Fatalf("Expected error, but returned none")
				}
			} else {
				if err != nil {
					t.Fatalf("Unexpected error: %v", err)
				}
				expectedPayload := []byte(payload)
				if string(actualPayload) != string(expectedPayload) {
					t.Errorf("Incorrect payload extracted: got: %s, want: %s", string(actualPayload), string(expectedPayload))
				}
			}
		})
	}
}

func TestCreateAttestation_WellFormedAttestation(t *testing.T) {
	tcs := []struct {
		name               string
		privateKey         []byte
		expectNewSignerErr bool
	}{
		{
			name:               "correct signature over payload",
			privateKey:         []byte(gpgPrivateKey),
			expectNewSignerErr: false,
		},
		{
			name:               "invalid private key",
			privateKey:         []byte("invalid-private-key"),
			expectNewSignerErr: true,
		},
	}
	for _, tc := range tcs {
		t.Run(tc.name, func(t *testing.T) {
			signer, err := NewPgpSigner(tc.privateKey)
			if tc.expectNewSignerErr {
				if err == nil {
					t.Fatalf("Expected error but returned none")
				}
			} else {
				if err != nil {
					t.Fatalf("Unexpected error: %v", err)
				}
				att, err := signer.CreateAttestation([]byte(payload))
				if err != nil {
					t.Fatalf("Error creating the Attestation: %v", err)
				}

				// Check attestation contents
				if att.SerializedPayload != nil {
					t.Errorf("SerializedPayload does not match expected: got: %v, want: %v", att.SerializedPayload, nil)
				}
				if att.PublicKeyID != gpgPublicKeyID {
					t.Errorf("PublicKeyID does not match expected: got: %q, want %q", att.PublicKeyID, gpgPublicKeyID)
				}
			}
		})
	}
}

// Contents of generated signatures depend on external factors, including time
// and date. A signature is valid if it can be used to verify the Attestation.
func TestCreateAttestation_ValidSignature(t *testing.T) {
	tcs := []struct {
		name            string
		privateKey      []byte
		expectVerifyErr bool
	}{
		{
			name:            "valid signature over the payload",
			privateKey:      []byte(gpgPrivateKey),
			expectVerifyErr: false,
		},
		{
			name:            "wrong private key",
			privateKey:      []byte(wrongPrivateKey),
			expectVerifyErr: true,
		},
	}

	v := pgpVerifierImpl{}
	for _, tc := range tcs {
		t.Run(tc.name, func(t *testing.T) {
			signer, err := NewPgpSigner(tc.privateKey)
			if err != nil {
				t.Fatalf("Error creating the signer: %v", err)
			}

			att, err := signer.CreateAttestation([]byte(payload))
			if err != nil {
				t.Fatalf("Error creating the attestation: %v", err)
			}

			actualPayload, err := v.verifyPgp(att.Signature, []byte(gpgPublicKey))
			if tc.expectVerifyErr {
				if err == nil {
					t.Fatalf("Expected error but returned none")
				}
			} else {
				if err != nil {
					t.Fatalf("Unexpected error verifying the attestation: %v", err)
				}

				// The payload should not be mangled by `CreateAttestation` method
				if string(actualPayload) != payload {
					t.Errorf("Extracted payload does not match expected: got: %q, want: %q", string(actualPayload), payload)
				}
			}
		})
	}
}
