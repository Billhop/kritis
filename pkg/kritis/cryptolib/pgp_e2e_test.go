/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package cryptolib

import (
	"testing"
)

// These keys and signatures were generated by the following commands:
// `gpg --quick-generate-key --yes pgp_e2e@cryptolib.com`
// `gpg --export --armor pgp_e2e@cryptolib.com`
// `gpg --output gpgSignature --armor -u pgp_e2e@cryptolib.com --sign testPayload`

const e2ePublicKey = `-----BEGIN PGP PUBLIC KEY BLOCK-----

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
lViVawWpaA==
=hA9X
-----END PGP PUBLIC KEY BLOCK-----`

const e2eKeyID = "58FCB3BFACC717FF23E7C9FE044235A5E78F874C"

const e2ePrivateKey = `-----BEGIN PGP PRIVATE KEY BLOCK-----

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
K04oF0MR3F1FP5+mXZmjpEQxotoud5VYlWsFqWg=
=szUT
-----END PGP PRIVATE KEY BLOCK-----`

const e2eSignature = `-----BEGIN PGP MESSAGE-----

owGbwMvMwMXI4mS69Hl/uw/jWkbFJKFUo9SQ1OKSgMTKnPzEFL2SipK4m+yTqrk4
lZKLMksykxNzlKwUgFxOpcyU1LySzJJKKF9BQSklPzk7tUi3KDUttSg1LzkVKKOU
nlykl5mvn5aYnaqfmFOQmZeqBFRcqwM2ITcxPRVDe25iXmYa0Am6KZnpQApkSHFG
opGpmVWSQVKqZWJyskGyRXKikaFJmplJWqJJqkEqkJ2YlGyQlGZsYpRqkWiSlGxk
nGSeamFilJhkZJiclmRqkGiWmoiwuaSyAOw69/z89JxUheSc/NIUhaTMvMTSkowq
heT8vJJEoEuLFIoz0/MSS0qLQI5WUKjlqu1kPMXCwMjFYCKmyBLxZ/P+NcfF/ys/
P/kPFoisTKDgEpMpSC+IBwalQ3JRZUFJfk5mkl5yfi4DF6cATOH+Rdz/zI+0ubRe
nbb3dNe8ifP736eclvwiJ3fMO5Blb+YKU79FrkpX/kSuDtimrObP2vdwHfPlFxv/
nmpmlkjmWRyun3KB78Devq1GG/SvWmmdr7i+LfXdmr70jo2isZPbbJ4nHiv/xNh1
Y5PEghvSzqEMgYeWLDa781Bn8z7LzJnL/7xvq7+fdf/PgmtPvW6fPvrLpHveTSN7
KzfLwEYnsekHj9+1mPomz0woKbYiZvHi/ToFhR43/GwXLXfTEnlz//iBrl+iyyUX
cFs+S9O6O/mCfgxHw8VP5yw/X/0ZJmeY3B1mE2qV9YO7LvHTMVuJ99O78z43HtWX
2dCwV+Aen1qPyRomgWUzq55vs1oz41KV4przUuV3rny5tvHmzM+83ordyiZSjwpN
OyU2MES8OPdZLmG2/enlTP2TF63Y2fXS78H91NklnjIrGI047quvut1RZq+o/F8/
pOG2u9GF9/9YXp9otObYveiz69LNXxNW7WSZkCT/2bV1GcNXk4jzXUcMNsvOPjpT
TOjPfd+FW+LmXZnGbVh2vwMA
=gYvK
-----END PGP MESSAGE-----`

const e2eTestPayload = `{
	"critical": {
        "identity": {
            "docker-reference": "gcr.io/kritis-project/kritis-server"
        },
        "image": {
            "docker-manifest-digest": "sha256:b0be9acc0c8ca214f64fa4e0e214abc0bf342e8a4bc23b7e842ab21cfb50a6ea"
        },
    "type": "Google cloud binauthz container signature"
    }
}`

const testImage = "gcr.io/kritis-project/kritis-server@sha256:b0be9acc0c8ca214f64fa4e0e214abc0bf342e8a4bc23b7e842ab21cfb50a6ea"

func TestEndToEndWithAttestations(t *testing.T) {
	signer, err := NewPgpSigner([]byte(e2ePrivateKey))
	if err != nil {
		t.Fatalf("Error initializing signer: %v", err)
	}

	att, err := signer.CreateAttestation([]byte(e2eTestPayload))
	if err != nil {
		t.Fatalf("Error creating attestation: %v", err)
	}

	publicKey := NewPublicKey(Pgp, []byte(e2ePublicKey), e2eKeyID)
	verifier, err := NewVerifier(testImage, []PublicKey{publicKey})
	if err != nil {
		t.Fatalf("Error initializing verifier: %v", err)
	}

	err = verifier.VerifyAttestation(att)
	if err != nil {
		t.Fatalf("Error verifying attestation: %v", err)
	}
}
