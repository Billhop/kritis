/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package cryptolib

import (
	"io/ioutil"
	"path/filepath"
	"testing"

	"github.com/grafeas/kritis/pkg/kritis/testutil"
)

// Uses keys and signatures generated by commands:
// `gpg --quick-generate-key --yes pgp@cryptolib.com`
// `gpg --export --armor pgp@cryptolib.com > testdata/pubkey.gpg`
// `gpg --output testdata/signature.gpg --armor -u pgp@cryptolib.com --sign testdata/payload.txt`
func TestVerifyPgp(t *testing.T) {
	tcs := []struct {
		name           string
		signature      []byte
		publicKey      []byte
		payload        []byte
		validSignature bool
		validPayload   bool
	}{
		{
			name:           "valid gpg key pair",
			signature:      readFile(t, "signature.gpg"),
			publicKey:      readFile(t, "publicKey.gpg"),
			payload:        readFile(t, "payload.txt"),
			validSignature: true,
			validPayload:   true,
		},
		{
			name:           "invalid signature",
			signature:      []byte("invalid-sig"),
			publicKey:      readFile(t, "publicKey.gpg"),
			payload:        readFile(t, "payload.txt"),
			validSignature: false,
			validPayload:   false,
		},
		{
			name:           "invalid payload",
			signature:      readFile(t, "signature.gpg"),
			publicKey:      readFile(t, "publicKey.gpg"),
			payload:        []byte("invalid-payload"),
			validSignature: true,
			validPayload:   false,
		},
	}

	for _, tc := range tcs {
		t.Run(tc.name, func(t *testing.T) {
			payload, err := verifyPgp(tc.signature, tc.publicKey)
			testutil.CheckError(t, !tc.validSignature, err)

			// Skip payload check if signature verification failed
			if err != nil {
				return
			}

			if tc.validPayload && string(payload) != string(tc.payload) {
				t.Fatalf("Expected valid payload: got: %s, want: %s", string(payload), string(tc.payload))
			}
			if !tc.validPayload && string(payload) == string(tc.payload) {
				t.Fatalf("Expected invalid payload: got: %s, want: %s", string(payload), string(tc.payload))
			}
		})
	}
}

func readFile(t *testing.T, filename string) []byte {
	path := filepath.Join("testdata", filename)
	contents, err := ioutil.ReadFile(path)
	if err != nil {
		t.Fatalf("Unexpected file read error: %v", err)
	}
	return contents
}
