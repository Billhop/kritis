/*
Copyright 2020 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package cryptolib

import "errors"

// Signer contains methods to create a signed Attestation.
type Signer interface {
	// CreateAttestation creates an Attestation whose signature is generated by
	// signing the given payload with the private key. For PGP and PKIX, `payload`
	// should be the raw payload data. For JWT, `payload` should be a serialized
	// but unsigned token.
	CreateAttestation(payload []byte, alg SignatureAlgorithm) (*Attestation, error)
}

type signer struct {
	PrivateKey  []byte
	PublicKeyID string
}

// NewSigner creates a Signer interface. `privateKey` contains the key data for
// the private key that signs attestations. `publicKeyID` is the ID of the
// public key that can verify those signatures.
func NewSigner(privateKey []byte, publicKeyID string) Signer {
	return &signer{
		PrivateKey:  privateKey,
		PublicKeyID: publicKeyID,
	}
}

// CreateAttestation creates a signed Attestation. See Signer for more details.
func (s *signer) CreateAttestation(payload []byte, alg SignatureAlgorithm) (*Attestation, error) {
	switch alg.keyMode() {
	case Pkix:
		return createPkixAttestation(payload, alg)
	case Pgp:
		return createPgpAttestation(payload, alg)
	case Jwt:
		return createJwtAttestation(payload, alg)
	default:
		return nil, errors.New("invalid key mode")
	}
}

// Unimplemented functions
func createPkixAttestation(payload []byte, alg SignatureAlgorithm) (*Attestation, error) {
	return nil, errors.New("attestation type not implemented")
}

func createPgpAttestation(payload []byte, alg SignatureAlgorithm) (*Attestation, error) {
	return nil, errors.New("attestation type not implemented")
}

func createJwtAttestation(payload []byte, alg SignatureAlgorithm) (*Attestation, error) {
	return nil, errors.New("attestation type not implemented")
}
